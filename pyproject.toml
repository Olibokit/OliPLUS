[tool.poetry]
name = "oliplus"
version = "0.1.0"
description = "Cockpit personnel pour automatisations, visualisation, NLP, OCR, et plus"
authors = ["Olivier <ton.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/toncompte/oliplus"
repository = "https://github.com/toncompte/oliplus"
keywords = ["automation", "NLP", "OCR", "dashboard", "streamlit", "fastapi"]
classifiers = [
  "Programming Language :: Python :: 3.10",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]

[tool.poetry.dependencies]
python = "^3.10"

# === CORE BACKEND ===
fastapi = "==0.111.0"
uvicorn = "==0.30.1"
sqlalchemy = "^2.0"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.0"
python-dotenv = "^1.0.1"
python-multipart = "==0.0.9"
loguru = "==0.7.2"

# === SECURITY / AUTH ===
python-jose = "^3.3.0"
passlib = "^1.7.4"
pycryptodome = "^3.20.0"
pydantic = { version = "==2.7.1", extras = ["email"] }
bcrypt = "^4.1.3"
ecdsa = "^0.18.0"
rsa = "^4.9"
pyasn1 = "^0.5.1"

# === MONITORING / SYSTEM ===
prometheus-client = "==0.20.0"
sentry-sdk = "^2.0.1"
psutil = "==5.9.8"
opentelemetry-api = "^1.24.0"
opentelemetry-sdk = "^1.24.0"
opentelemetry-exporter-otlp = "^1.24.0"
opentelemetry-exporter-otlp-proto-http = "^1.24.0"
opentelemetry-exporter-otlp-proto-grpc = "^1.24.0"
opentelemetry-semantic-conventions = "^0.57b0"
opentelemetry-proto = "^1.0.0"

# === NETWORKING / DYNAMIQUE ===
httpx = "^0.27.0"
websocket-client = "^1.6.3"
websockets = "^12.0"
watchgod = "==0.8.1"
schedule = "==1.2.1"

# === FIRESTORE ===
google-cloud-firestore = "^2.13.0"
google-api-core = "^2.18.0"
google-auth = "^2.29.0"
google-cloud-core = "^2.4.1"

# === WORKERS / ASYNC ===
celery = "^5.3.6"
kombu = "^5.3.5"
vine = "^5.1.0"
redis = "^5.0.4"
tenacity = "^8.3.0"
croniter = "^2.0.1"
flower = "^2.0.1"

# === UI / VISUALISATION ===
streamlit = "^1.26.0"
plotly = "^5.20.0"
matplotlib = "^3.8.0"
seaborn = "^0.13.2"
openpyxl = "^3.1.2"
pandas = "^2.2.2"
altair = "^5.3.0"
markdown-it-py = "^3.0.0"
mdurl = "^0.1.2"

# === NLP / TEXT ===
spacy = "^3.7.4"
transformers = "^4.55.0"
nltk = "^3.8.1"
textblob = "^0.18.0"
sentence-transformers = "^2.6.1"
langdetect = "^1.0.9"
unidecode = "^1.3.7"
regex = "^2023.12.25"
huggingface-hub = "^0.34.0"
tokenizers = "^0.21.0"
torch = "^2.3.0"

# === OCR / PDF ===
ocrmypdf = ">=14.0,<16.0"
pytesseract = "^0.3.10"
pymupdf = ">=1.25.3,<2.0"
pdfminer-six = "==20231228"
Pillow = "^10.3.0"
pdf2image = "^1.17.0"
reportlab = "^4.1.0"

# === CLI / INTERACTIVITY ===
click = "^8.1.7"
rich = "^13.7.1"
typer = "^0.12.3"

# === DATA / PIPELINES ===
duckdb = "^0.10.2"
sqlmodel = "^0.0.16"
datasets = "^2.19.1"
pyarrow = "^15.0.2"

[tool.poetry.group.dev.dependencies]
black = "^24.4.0"
flake8 = "^7.0.0"
isort = "^5.13.2"
mypy = "^1.9.0"
pytest = "^8.2.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.6"
pre-commit = "^3.7.0"
ipython = "^8.24.0"
debugpy = "==1.8.1"
ruff = "^0.4.4"
bandit = "^1.7.7"
pip-tools = "^7.4.1"

[tool.poetry.extras]
core = ["fastapi", "uvicorn", "python-dotenv", "loguru", "pydantic"]
ui = ["plotly", "matplotlib", "seaborn", "openpyxl", "pandas", "streamlit", "altair", "markdown-it-py", "mdurl"]
nlp = ["spacy", "transformers", "nltk", "textblob", "sentence-transformers", "langdetect", "unidecode", "regex", "huggingface-hub", "tokenizers", "torch"]
ocr = ["ocrmypdf", "pytesseract", "pymupdf", "pdfminer-six", "Pillow", "pdf2image", "reportlab"]
cli = ["click", "rich", "typer"]
networking = ["httpx", "websocket-client", "websockets", "watchgod", "schedule"]
firestore = ["google-cloud-firestore", "google-api-core", "google-auth", "google-cloud-core"]
security = ["python-jose", "passlib", "pycryptodome", "pydantic", "bcrypt", "ecdsa", "rsa", "pyasn1"]
monitoring = ["prometheus-client", "sentry-sdk", "psutil", "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-exporter-otlp", "opentelemetry-exporter-otlp-proto-http", "opentelemetry-exporter-otlp-proto-grpc", "opentelemetry-semantic-conventions", "opentelemetry-proto"]
workers = ["celery", "kombu", "vine", "redis", "tenacity", "croniter", "flower"]
data = ["duckdb", "sqlmodel", "datasets", "pyarrow"]
db-sync = ["sqlalchemy", "psycopg2-binary", "python-dotenv", "loguru"]
db-async = ["sqlalchemy", "asyncpg", "python-dotenv", "loguru"]
full-backend = ["sqlalchemy", "psycopg2-binary", "asyncpg", "python-dotenv", "loguru", "python-jose", "passlib", "pycryptodome", "pydantic", "prometheus-client", "sentry-sdk", "psutil", "httpx", "websocket-client", "websockets", "watchgod", "schedule"]
full-ai = ["spacy", "transformers", "nltk", "textblob", "sentence-transformers", "ocrmypdf", "pytesseract", "pymupdf", "pdfminer-six", "Pillow", "pdf2image", "reportlab", "duckdb", "sqlmodel", "datasets", "pyarrow", "langdetect", "unidecode", "regex", "huggingface-hub", "tokenizers", "torch"]
full-dev = [
  "black", "flake8", "isort", "mypy", "pytest", "pytest-cov", "pytest-asyncio",
  "pre-commit", "ipython", "debugpy", "ruff", "click", "rich", "typer",
  "plotly", "matplotlib", "seaborn", "openpyxl", "pandas", "streamlit",
  "bandit", "pip-tools"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
