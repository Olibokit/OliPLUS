from pathlib import Path
from datetime import datetime

def deploy_classification_files(log_only=False, log_dir=None):
    """
    DÃ©ploie les fichiers de classification documentaire (simulation cockpitifiÃ©e).
    
    - CrÃ©e un log horodatÃ© dans le rÃ©pertoire de gouvernance ou personnalisÃ©
    - Retourne le contenu du log pour affichage ou journalisation

    Args:
        log_only (bool): Si True, ne crÃ©e pas physiquement les fichiers (dry run)
        log_dir (str or Path): RÃ©pertoire personnalisÃ© pour le journal (optionnel)

    Returns:
        str: texte du journal simulÃ© de dÃ©ploiement
    """

    timestamp = datetime.now().strftime('%Y-%m-%d_%Hh%Mm%Ss')
    log_lines = [
        f"ðŸ•’ [{timestamp}] DÃ©ploiement cockpit dÃ©clenchÃ©",
        "ðŸ“¦ YAML classification copiÃ© dans la structure OliPLUS",
        "ðŸ“Š Export CSV synchronisÃ© pour consultation",
        "ðŸ“˜ Markdown mis Ã  jour pour lâ€™affichage documentation",
        "ðŸŒ³ Arborescence GDA en place",
        "âœ… Fin du dÃ©ploiement cockpitifiÃ©",
        "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€",
        f"ðŸ”¢ Total actions simulÃ©es : 4"
    ]
    log_text = "\n".join(log_lines)

    if not log_only:
        # DÃ©finir le chemin du journal
        log_folder = Path(log_dir) if log_dir else Path("6000_INFORMATION_ET_COMMUNICATIONS") / "1100_GOUVERNANCE_INFORMATION"
        log_folder.mkdir(parents=True, exist_ok=True)
        log_file = log_folder / f".copilot_classification_{timestamp}.log"
        log_file.write_text(log_text, encoding="utf-8")

    return log_text
