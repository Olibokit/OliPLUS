from typing import Optional, List, Literal
from pydantic import BaseModel, Field

class SearchFilter(BaseModel):
    """
    üîç Recherche texte globale, optionnelle (sSearch cockpit).
    """
    search: Optional[str] = Field(
        default=None,
        example="durand",
        description="Texte √† rechercher globalement (nom, email, etc.)"
    )

class PaginationParams(BaseModel):
    """
    üìÑ Param√®tres standardis√©s pour la pagination cockpit.
    """
    page: int = Field(
        default=1,
        ge=1,
        description="Num√©ro de page (‚â• 1)"
    )
    page_size: int = Field(
        default=20,
        ge=1,
        le=100,
        description="Nombre d'√©l√©ments par page (1 √† 100)"
    )

class OrderBy(BaseModel):
    """
    ‚ÜïÔ∏è Ordre de tri sur un champ donn√©.
    """
    field: str = Field(
        ...,
        description="Nom du champ √† trier (ex: 'last_name')"
    )
    direction: Literal["asc", "desc"] = Field(
        default="asc",
        description="Direction du tri : 'asc' ou 'desc'"
    )

class EmployeeFilters(SearchFilter, PaginationParams):
    """
    üßë‚Äçüíº Filtres sp√©cifiques pour la liste des employ√©s.
    """
    department_id: Optional[int] = Field(
        default=None,
        description="ID du d√©partement pour filtrer"
    )
    status: Optional[str] = Field(
        default=None,
        example="Active",
        description="Statut de l'employ√© (ex: 'Active', 'Inactive')"
    )
    order_by: Optional[List[OrderBy]] = Field(
        default=None,
        description="Liste des crit√®res de tri"
    )
    show_subordinates_only: bool = Field(
        default=False,
        description="Afficher uniquement les subordonn√©s de l'utilisateur courant"
    )
