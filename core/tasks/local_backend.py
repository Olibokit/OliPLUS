import logging
from core.tasks.base_backend import TaskBackend

logger = logging.getLogger(__name__)

class LocalTaskBackend(TaskBackend):
    """
    Backend cockpit local â€” utilisÃ© pour le dÃ©veloppement, les tests ou comme fallback.
    Simule l'exÃ©cution des tÃ¢ches sans passer par un systÃ¨me distribuÃ©.
    """

    def submit(self, task: str, payload: dict) -> dict:
        logger.info(f"[LocalTask] Soumission de la tÃ¢che '{task}' avec payload : {payload}")

        # ğŸ’¥ Simule une erreur pour certaines tÃ¢ches (optionnel)
        if task == "simulate_error":
            logger.warning(f"[LocalTask] Ã‰chec simulÃ© pour la tÃ¢che '{task}'")
            return {"status": "error", "message": "Erreur simulÃ©e dans le backend local"}

        # ğŸ§ª Mock de rÃ©sultat selon le type de tÃ¢che
        result = self._mock_result(task, payload)

        logger.debug(f"[LocalTask] RÃ©sultat simulÃ© : {result}")
        return {"status": "ok", "task": task, "result": result}

    def _mock_result(self, task: str, payload: dict) -> dict:
        """
        GÃ©nÃ¨re un rÃ©sultat simulÃ© en fonction du type de tÃ¢che.
        Peut Ãªtre enrichi selon les besoins du cockpit.
        """
        if task.startswith("email."):
            return {"sent": True, "to": payload.get("to")}
        elif task.startswith("user."):
            return {"user_id": payload.get("user_id"), "updated": True}
        else:
            return {"echo": payload}
