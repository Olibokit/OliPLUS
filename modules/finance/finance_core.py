# üì¶ finance_core.py ‚Äî Moteur cockpitifi√© des op√©rations financi√®res

from datetime import datetime
from decimal import Decimal
from typing import Optional, List
from models.facture import Facture
from models.devis import Devis
from models.paiement import Paiement

class FinanceCore:
    """
    Moteur cockpitifi√© pour la gestion des op√©rations financi√®res :
    devis, factures, paiements, √©ch√©ances, validation.
    """

    def __init__(self):
        self.devis_list: List[Devis] = []
        self.factures_list: List[Facture] = []
        self.paiements_list: List[Paiement] = []

    def enregistrer_devis(self, devis: Devis):
        self.devis_list.append(devis)

    def enregistrer_facture(self, facture: Facture):
        self.factures_list.append(facture)

    def enregistrer_paiement(self, paiement: Paiement):
        self.paiements_list.append(paiement)

    def calculer_total_factures(self) -> Decimal:
        return sum(f.montant for f in self.factures_list)

    def calculer_total_impay√©(self) -> Decimal:
        return sum(f.montant for f in self.factures_list if not f.est_pay√©e())

    def verifier_echeances(self) -> List[Facture]:
        aujourd_hui = datetime.today().date()
        return [f for f in self.factures_list if f.date_echeance < aujourd_hui and not f.est_pay√©e()]

    def valider_coh√©rence(self) -> bool:
        """
        V√©rifie que chaque paiement est bien rattach√© √† une facture existante.
        """
        facture_ids = {f.id for f in self.factures_list}
        return all(p.facture_id in facture_ids for p in self.paiements_list)

    def generer_rapport_financier(self) -> dict:
        return {
            "total_factures": float(self.calculer_total_factures()),
            "total_impay√©": float(self.calculer_total_impay√©()),
            "factures_en_retard": len(self.verifier_echeances()),
            "coh√©rence_valid√©e": self.valider_coh√©rence()
        }
