from datetime import datetime
from typing import Dict, List, Optional
from employee_dto import PunchInRequest, PunchOutRequest
from exceptions import PermissionDeniedError, ValidationError
import logging

# üîß Configuration du logger cockpit
logger = logging.getLogger("attendance")
logger.setLevel(logging.INFO)

attendance_log: Dict[str, List[Dict[str, Optional[datetime]]]] = {}

def punch_in(employee_id: str, timestamp: datetime) -> None:
    """
    Enregistre une entr√©e (punch in) pour un employ√©.

    Args:
        employee_id: Identifiant de l'employ√©
        timestamp: Date et heure d'entr√©e

    Raises:
        ValidationError: si l'entr√©e chevauche une absence ou une entr√©e existante
    """
    if employee_id not in attendance_log:
        attendance_log[employee_id] = []

    # üß† V√©rification de chevauchement (√† int√©grer avec leave_service plus tard)
    last_entry = attendance_log[employee_id][-1] if attendance_log[employee_id] else None
    if last_entry and 'out' not in last_entry:
        raise ValidationError("‚õî Punch in d√©j√† actif sans punch out.")

    attendance_log[employee_id].append({'in': timestamp})
    logger.info(f"‚úÖ Punch in enregistr√© pour {employee_id} √† {timestamp.isoformat()}")

def punch_out(employee_id: str, timestamp: datetime) -> None:
    """
    Enregistre une sortie (punch out) pour un employ√©.

    Args:
        employee_id: Identifiant de l'employ√©
        timestamp: Date et heure de sortie

    Raises:
        PermissionDeniedError: si aucun punch in n'est actif
    """
    if employee_id in attendance_log and attendance_log[employee_id]:
        last_entry = attendance_log[employee_id][-1]
        if 'out' in last_entry:
            raise ValidationError("‚õî Punch out d√©j√† effectu√© pour cette session.")
        last_entry['out'] = timestamp
        logger.info(f"‚úÖ Punch out enregistr√© pour {employee_id} √† {timestamp.isoformat()}")
    else:
        raise PermissionDeniedError("Punch out sans punch in.")

def get_attendance(employee_id: str) -> List[Dict[str, Optional[datetime]]]:
    """
    Retourne l'historique de pr√©sence d'un employ√©.

    Args:
        employee_id: Identifiant de l'employ√©

    Returns:
        Liste des sessions de pr√©sence (in/out)
    """
    return attendance_log.get(employee_id, [])
